name: test

on:
  pull_request:
    paths-ignore:
      - "**/*.asciidoc"
      - "**/*.md"
      - "**/*.png"
  push:
    branches:
      - main
    paths-ignore:
      - "**/*.asciidoc"
      - "**/*.md"
      - "**/*.png"

permissions:
  contents: read

jobs:
  build-test:
    uses: ./.github/workflows/build-test.yml

  build-packages:
    uses: ./.github/workflows/build-packages.yml
    needs:
      - build-test

  generate-test-packages-matrix:
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.generate.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: generate
        run: |
          MATRIX=$(.ci/generate_package_lifecycle_test_matrix.sh | jq --raw-input --slurp -c 'split("\n") | map(select(length > 0)) | map(split(",")) | map({ "item": . } )')
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

  test-packages:
    timeout-minutes: 120
    needs:
      - build-packages
      - generate-test-packages-matrix
      - build-test
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.generate-test-packages-matrix.outputs.include) }}
    env:
      PHP_VERSION: ${{ matrix.item[0] }}
      LINUX_PACKAGE_TYPE: ${{ matrix.item[1] }}
      TESTING_TYPE: ${{ matrix.item[2] }}
      ELASTIC_APM_PHP_TESTS_MATRIX_ROW: "${{ matrix.item[0] }},${{ matrix.item[1] }},${{ matrix.item[2] }},${{ matrix.item[3] }},${{ matrix.item[4] }}"
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: package
          path: build/packages

      - uses: actions/download-artifact@v3
        with:
          name: package-parts
          path: src/ext/modules

      - if: ${{ env.TESTING_TYPE == 'lifecycle' }}
        name: lifecycle test
        run: |
          make -C packaging "prepare-${LINUX_PACKAGE_TYPE}"
          make -C packaging "${LINUX_PACKAGE_TYPE}-lifecycle-testing"

      - if: ${{ startsWith(env.TESTING_TYPE, 'lifecycle-') }}
        name: lifecycle test on prod server
        run: |
          make -C packaging prepare-${LINUX_PACKAGE_TYPE}-${TESTING_TYPE#lifecycle-}
          make -C packaging "${LINUX_PACKAGE_TYPE}-lifecycle-testing-in-${TESTING_TYPE#lifecycle-}"

      - if: ${{ env.TESTING_TYPE == 'php-upgrade' }}
        name: php upgrade test
        run: |
          make -C packaging "prepare-${LINUX_PACKAGE_TYPE}"
          make -C packaging "${LINUX_PACKAGE_TYPE}-php-upgrade-testing"

      ## Agent upgrade requires to build the package with a different version
      ## Then download the packages for the current version.
      ## Run the upgrade testing.
      - if: ${{ env.TESTING_TYPE == 'agent-upgrade' }}
        name: agent upgrade test - prepare
        run: |
          mv build/packages build/backup
          VERSION=1.0.0 make -C packaging package
          mv build/packages build/local
          mv build/backup build/packages
          make -C packaging "${LINUX_PACKAGE_TYPE}-agent-upgrade-testing-local"

      - if: success() || failure()
        name: Prepare Upload
        run: >-
          find build
          -name "*junit.xml"
          -exec bash -c 'mv {} "build/${ELASTIC_APM_PHP_TESTS_MATRIX_ROW}-$(basename {})"'
          \;

      - if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: build/*junit.xml
